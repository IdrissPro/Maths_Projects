#PARTIE 1.1: SIMULATION ECHANTILLON ET HISTOGRAMME

#Fixer les paramètres de la loi de Pareto
theta <- 1
n_values <- c(10, 100, 1000)
alpha_values <- c(3, 10)
#séparer les graphiques
par(mfrow=c(length(n_values), length(alpha_values)), mar=c(4, 4, 2, 2))

for (i in 1:length(n_values)) {
  for (j in 1:length(alpha_values)) {
    n <- n_values[i]
    alpha <- alpha_values[j]
    x <- theta*(1-runif(n))^(-1/alpha)
    
    hist(x, breaks = 50, freq = FALSE, main = paste("n =", n, ", alpha =", alpha),
         xlab = "Valeurs de l'échantillon")
    
    pareto_fdr <- function(x) {
      ifelse(x < theta, 0, (alpha*(theta)^alpha)*(1/x)^(alpha+1))
    }
    curve(pareto_fdr, from = 0, to = max(x), ylab = "F(x)", xlab = "x", add=TRUE, col="blue")
  }
}


#PARTIE1.2: FLUCTUATION D'ECHANTILLONNAGE ET ESTIMATEUR

n=1000 # On prend n=1000 pour observer les fluctuations d'échantillonage à grande échelle
# Simuler 3 échantillons de n valeurs indépendantes de la loi de Pareto
x_1 <- theta*(1-runif(n))^(-1/alpha)
x_2 <- theta*(1-runif(n))^(-1/alpha)
x_3 <- theta*(1-runif(n))^(-1/alpha)

#Partie estimateur
par(mfrow= c(2,2))
n <- 1000
#boucler sur alpha l'affichage de nos courbes
for (j in 1:length(alpha_values)) {
  alpha <- alpha_values[j]
  x_1 <- theta*(1-runif(n))^(-1/alpha)
  x_2 <- theta*(1-runif(n))^(-1/alpha)
  x_3 <- theta*(1-runif(n))^(-1/alpha)
  a_1 <- rep(0, n)
  a_2 <- rep(0, n)
  a_3 <- rep(0, n)
  for (k in 1:n) {
    a_1[k] <- k / sum(log(x_1[1:k]))
    a_2[k] <- k / sum(log(x_2[1:k]))
    a_3[k] <- k / sum(log(x_3[1:k]))
  }
  # Affichage des résultats
cat("Les valeurs de la suite (a_1_k) sont:\n")
print(a_1)
cat("Les valeurs de la suite (a_2_k) sont:\n")
print(a_2)
cat("Les valeurs de la suite (a_3_k) sont:\n")
print(a_3)
  # Affichage de la courbe pour k allant de 1 à 40 (comportement transitoire)
  main_title=paste("Simulations (comportement transitoire)\n alpha = ", alpha_values[j])
  plot(1:40, a_1[1:40], type = "b",
      xlab = "Valeur de k", ylab = "Valeur de a_k",main=main_title,col="red")
  lines(1:40, a_2[1:40], type = "b",col="blue")
  lines(1:40, a_3[1:40], type = "b",col="green")
  abline(h = alpha, col = "black", lty = 2)
  # Affichage de la courbe pour k allant de 1 à n (comportement transitoire)
  main_title=paste("Convergencence de la suite a_k \n alpha=", alpha_values[j])
  plot(1:n, a_1, type = "l", col = "red", ylim = range(c(a_1, a_2)), xlab = "Valeur de k", ylab = "Valeur de a_k",main=main_title)
  lines(1:n, a_2, type = "l", col = "blue")
  lines(1:n, a_3, type = "l", col = "green")
  abline(h = alpha, col = "black", lty = 2)
  }


#PARTIE 2(simuler le comportement à distance finie de l'estimateur)

# Fixer le paramètre alpha de la loi de Pareto
alpha <- 3
# Fixer le nombre d'échantillons à simuler
n_echantillons <- 400

# Fixer la taille de chaque échantillon
taille_echantillon <- 1000

# Initialiser la matrice qui stockera les données
data <- matrix(nrow = taille_echantillon, ncol = n_echantillons)

# Simuler les échantillons et les stocker dans la matrice data
for (i in 1:n_echantillons) {
  x <- runif(taille_echantillon)
  data[,i] <- (1-x)^(-1/alpha)
}

#Etablir la matrice des simulations pour les différentes valeurs (50, 100, 200, 500, 1000)
sizes <- c(50, 100, 200, 500, 1000)
alpha_est <- matrix(0, nrow = length(sizes), ncol = n_echantillons)
for (i in 1:length(sizes)) {
  for (j in 1:n_echantillons) {
    alpha_est[i,j] <- sizes[i] / sum(log(data[1:sizes[i],j]))
  }
}

#Affichage des boîtes à moustache et des moyenne des estimations
boxplot(t(alpha_est), names = sizes, ylab = "Valeur de l'estimateur", xlab = "Taille de l'échantillon")
abline(h = alpha, col = "red", lty = 2)
points(apply(alpha_est, 1, mean))

